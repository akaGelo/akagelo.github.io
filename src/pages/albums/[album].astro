---
export async function getStaticPaths() {
  const albums = [
    {
      id: 'nature',
      title: 'Природа',
      description: 'Пейзажи и дикая природа',
      photos: [
        { id: 1, src: '/images/albums/nature/photo1.jpg', alt: 'Озеро в горах' },
        { id: 2, src: '/images/albums/nature/photo2.jpg', alt: 'Лесная дорога' },
        { id: 3, src: '/images/albums/nature/photo3.jpg', alt: 'Туманные горы' },
        { id: 4, src: '/images/albums/nature/photo4.jpg', alt: 'Зеленые поля' },
        { id: 5, src: '/images/albums/nature/photo5.jpg', alt: 'Водопад в лесу' }
      ]
    },
    {
      id: 'street',
      title: 'Уличная фотография',
      description: 'Городские моменты',
      photos: [
        { id: 1, src: '/images/albums/street/photo1.jpg', alt: 'Городские здания' },
        { id: 2, src: '/images/albums/street/photo2.jpg', alt: 'Пустая улица ночью' },
        { id: 3, src: '/images/albums/street/photo3.jpg', alt: 'Люди у зданий' },
        { id: 4, src: '/images/albums/street/photo4.jpg', alt: 'Узкая улочка' },
        { id: 5, src: '/images/albums/street/photo5.jpg', alt: 'Городской велосипедист' }
      ]
    },
    {
      id: 'portraits',
      title: 'Портреты',
      description: 'Люди и эмоции',
      photos: [
        { id: 1, src: '/images/albums/portraits/photo1.jpg', alt: 'Мужской портрет' },
        { id: 2, src: '/images/albums/portraits/photo2.jpg', alt: 'Женщина у стены' },
        { id: 3, src: '/images/albums/portraits/photo3.jpg', alt: 'Мужчина в белой рубашке' },
        { id: 4, src: '/images/albums/portraits/photo4.jpg', alt: 'Улыбающаяся женщина' },
        { id: 5, src: '/images/albums/portraits/photo5.jpg', alt: 'Черно-белый портрет' }
      ]
    }
  ];

  return albums.map((album) => ({
    params: { album: album.id },
    props: { album }
  }));
}

const { album } = Astro.props;

const photographer = {
  email: "your.email@example.com",
  social: {
    instagram: "@your_instagram",
    telegram: "@your_telegram"
  }
};
---

<html lang="ru">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{album.title} | Vyukov Oleg</title>
  </head>
  <body>
    <main>
      <section class="album-header">
        <a href="/#albums" class="back-link">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M19 12H5"/>
            <path d="M12 5L5 12L12 19"/>
          </svg>
        </a>
        <h1>{album.title}</h1>
      </section>

      <section class="photo-gallery">
        <div class="gallery-grid">
          {album.photos.map((photo, index) => (
            <div class="photo-item" data-photo-id={photo.id} onclick={`openLightbox(${index})`}>
              <img src={photo.src} alt={photo.alt} loading="lazy" />
            </div>
          ))}
        </div>
      </section>
    </main>

    <!-- Lightbox -->
    <div id="lightbox" class="lightbox">
      <div class="lightbox-content">
        <span class="close" onclick="closeLightbox()">&times;</span>
        <button class="nav-button prev" onclick="previousPhoto()">‹</button>
        <img id="lightbox-image" src="" alt="" onclick="nextPhoto()" />
        <button class="nav-button next" onclick="nextPhoto()">›</button>
      </div>
    </div>



    <script define:vars={{ photos: album.photos }}>
      let currentPhotoIndex = 0;

      // Делаем функции глобальными
      window.openLightbox = function(index) {
        currentPhotoIndex = index;
        showPhoto(currentPhotoIndex);
        
        const lightbox = document.getElementById('lightbox');
        lightbox.style.display = 'flex';
        document.body.style.overflow = 'hidden';
      }

      function showPhoto(index) {
        const photo = photos[index];
        const image = document.getElementById('lightbox-image');
        
        image.src = photo.src;
        image.alt = photo.alt;
      }

      window.nextPhoto = function() {
        currentPhotoIndex = (currentPhotoIndex + 1) % photos.length;
        showPhoto(currentPhotoIndex);
      }

      window.previousPhoto = function() {
        currentPhotoIndex = (currentPhotoIndex - 1 + photos.length) % photos.length;
        showPhoto(currentPhotoIndex);
      }

      window.closeLightbox = function() {
        const lightbox = document.getElementById('lightbox');
        lightbox.style.display = 'none';
        document.body.style.overflow = 'auto';
      }

      // Закрытие по клику вне изображения
      document.getElementById('lightbox').addEventListener('click', function(e) {
        if (e.target === this) {
          closeLightbox();
        }
      });

      // Навигация клавишами
      document.addEventListener('keydown', function(e) {
        const lightbox = document.getElementById('lightbox');
        if (lightbox.style.display === 'flex') {
          if (e.key === 'Escape') {
            closeLightbox();
          } else if (e.key === 'ArrowRight') {
            nextPhoto();
          } else if (e.key === 'ArrowLeft') {
            previousPhoto();
          }
        }
      });

      // Masonry layout
      function layoutMasonry() {
        const grid = document.querySelector('.gallery-grid');
        if (!grid) return;

        const cards = Array.from(grid.children);
        if (cards.length === 0) return;

        // Определяем количество колонок в зависимости от ширины
        const containerWidth = grid.offsetWidth;
        let columnCount = 4;
        
        if (containerWidth >= 1200) columnCount = 5;
        else if (containerWidth >= 900) columnCount = 4;
        else if (containerWidth >= 600) columnCount = 3;
        else if (containerWidth >= 480) columnCount = 2;
        else columnCount = 1;

        // Вычисляем ширину колонки
        const gap = 20;
        const columnWidth = (containerWidth - (gap * (columnCount - 1))) / columnCount;
        
        // Инициализируем массив высот колонок
        const columnHeights = new Array(columnCount).fill(0);

        // Размещаем каждую карточку
        cards.forEach((card, index) => {
          // Находим самую короткую колонку
          const shortestColumnIndex = columnHeights.indexOf(Math.min(...columnHeights));
          
          // Вычисляем позицию
          const x = shortestColumnIndex * (columnWidth + gap);
          const y = columnHeights[shortestColumnIndex];
          
          // Устанавливаем размер и позицию
          card.style.position = 'absolute';
          card.style.left = x + 'px';
          card.style.top = y + 'px';
          card.style.width = columnWidth + 'px';
          
          // Обновляем высоту колонки
          columnHeights[shortestColumnIndex] += card.offsetHeight + gap;
        });

        // Устанавливаем высоту контейнера
        const maxHeight = Math.max(...columnHeights);
        grid.style.height = (maxHeight - gap) + 'px';
      }

      // Инициализация masonry
      function initMasonry() {
        const images = document.querySelectorAll('.photo-item img');
        let loadedImages = 0;

        const checkAllLoaded = () => {
          loadedImages++;
          if (loadedImages === images.length) {
            setTimeout(layoutMasonry, 100);
          }
        };

        if (images.length === 0) {
          layoutMasonry();
          return;
        }

        images.forEach(img => {
          if (img.complete) {
            checkAllLoaded();
          } else {
            img.addEventListener('load', checkAllLoaded);
            img.addEventListener('error', checkAllLoaded);
          }
        });

        // Перестраиваем при изменении размера окна
        let resizeTimeout;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(layoutMasonry, 250);
        });
      }

      // Инициализация после загрузки DOM
      document.addEventListener('DOMContentLoaded', initMasonry);
    </script>
  </body>
</html>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    color: #333;
    background: #f8f9fa;
  }



  main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 2rem;
  }

  .album-header {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: 3rem;
  }

  .back-link {
    position: absolute;
    left: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 50px;
    height: 50px;
    color: #262626;
    text-decoration: none;
    border-radius: 12px;
    transition: all 0.3s ease;
    background: transparent;
  }

  .back-link:hover {
    color: #8e8e8e;
    background: #f5f5f5;
    transform: translateX(-2px);
  }

  .album-header h1 {
    font-size: 3rem;
    color: #2c3e50;
    margin: 0;
  }

  /* Мобильные стили */
  @media (max-width: 768px) {
    .album-header h1 {
      font-size: 2rem;
    }
    
    .back-link {
      width: 40px;
      height: 40px;
    }
    
    .back-link svg {
      width: 20px;
      height: 20px;
    }
  }



  .gallery-grid {
    position: relative;
    padding: 0;
  }

  .photo-item {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .photo-item:hover {
    transform: translateY(-6px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .photo-item img {
    width: 100%;
    height: auto;
    display: block;
  }

  .nav-button {
    position: fixed;
    bottom: 80px;
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.2);
    width: 50px;
    height: 50px;
    border-radius: 50%;
    font-size: 24px;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 1003;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    backdrop-filter: blur(10px);
    opacity: 0.8;
  }

  .nav-button:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.4);
    opacity: 1;
  }

  .nav-button.prev:hover {
    transform: translateX(-80px) scale(1.05);
  }

  .nav-button.next:hover {
    transform: translateX(30px) scale(1.05);
  }

  .nav-button.prev {
    left: 50%;
    transform: translateX(-80px);
  }

  .nav-button.next {
    left: 50%;
    transform: translateX(30px);
  }

  .lightbox {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(128, 128, 128, 0.97);
    align-items: center;
    justify-content: center;
  }

  .lightbox-content {
    position: relative;
    max-width: 95vw;
    max-height: 95vh;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .close {
    position: fixed;
    top: 30px;
    right: 30px;
    color: white;
    font-size: 2rem;
    font-weight: normal;
    cursor: pointer;
    z-index: 1003;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.15);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
    opacity: 0.8;
  }

  .close:hover {
    background: rgba(255, 255, 255, 0.25);
    border-color: rgba(255, 255, 255, 0.4);
    transform: scale(1.05);
    opacity: 1;
  }

  #lightbox-image {
    max-width: 90vw;
    max-height: 85vh;
    border-radius: 8px;
    object-fit: contain;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5);
    cursor: pointer;
  }



  footer {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 12px;
    padding: 1rem;
    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
    z-index: 50;
  }

  .contact-info {
    display: flex;
    gap: 0.8rem;
    align-items: center;
  }

  .contact-info a {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: rgba(44, 62, 80, 0.1);
    color: #2c3e50;
    text-decoration: none;
    transition: all 0.3s ease;
  }

  .contact-info a:hover {
    background: #2c3e50;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(44, 62, 80, 0.3);
  }

  @media (max-width: 768px) {
    main {
      padding: 1rem;
      padding-bottom: 6rem;
    }

    .album-header {
      flex-direction: column;
      gap: 1rem;
      text-align: center;
    }

    .album-header h1 {
      font-size: 2rem;
      text-align: center;
    }

    .back-link {
      align-self: flex-start;
    }





    .lightbox-content {
      max-width: 98vw;
      max-height: 98vh;
    }

    #lightbox-image {
      max-width: 95vw;
      max-height: 75vh;
    }

    .nav-button {
      width: 45px;
      height: 45px;
      font-size: 20px;
      bottom: 60px;
    }

    .nav-button.prev {
      transform: translateX(-60px);
    }

    .nav-button.next {
      transform: translateX(15px);
    }

    .nav-button.prev:hover {
      transform: translateX(-60px) scale(1.05);
    }

    .nav-button.next:hover {
      transform: translateX(15px) scale(1.05);
    }

    .close {
      top: 15px;
      right: 15px;
      width: 45px;
      height: 45px;
      font-size: 1.8rem;
    }

    footer {
      bottom: 1rem;
      right: 1rem;
      padding: 0.8rem;
    }

    .contact-info a {
      width: 36px;
      height: 36px;
    }

    .contact-info {
      gap: 0.6rem;
    }
  }
</style> 